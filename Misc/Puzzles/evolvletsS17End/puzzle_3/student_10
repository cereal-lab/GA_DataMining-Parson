Problem No. 3
Using Template # 100
The Problem:
else
}}
import java.util.Scanner;
System.out.print("Enter a string: "); //This line should immediately be placed before Line X
if (isPalindrome)
Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
public static void main(String[] args) {
String s = input.nextLine();          // This is line X
System.out.println(s + " is not a palindrome");
int low, high, isPalindrome;          // This is line Y
if (s.charAt(low) != s.charAt(high)) {
low= 0; high = s.length() - 1; isPalindrome = true;
low= 1; high = s.length() - 1; isPalindrome = true;
break;}
}
while (low < high {
while (low < high) {
public class Palindrome {
System.out.println(s + " is a palindrome");
low++; high--;
isPalindrome = false;
Using Template # 100
The Problem:
Using Template # 100
The Problem:
This problem contains 21 lines.
Re-assemble them with 23 (or fewer) moves for full credit
1. Moved from problem to solution at line 0: import java.util.Scanner;
2. Moved from problem to solution at line 1:     }}
3. Reordered from line 2 to 1: import java.util.Scanner;
4. Moved from problem to solution at line 2:     String s = input.nextLine();          // This is line X
5. Moved from problem to solution at line 2:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
6. Moved from problem to solution at line 2:   public static void main(String[] args) {
7. Moved from problem to solution at line 3: public class Palindrome {
8. Reordered from line 3 to 2: public class Palindrome {
9. Moved from problem to solution at line 4:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
10. Moved from problem to solution at line 5:     int low, high, isPalindrome;          // This is line Y
11. Moved from problem to solution at line 8:       System.out.println(s + " is not a palindrome");
12. Moved from problem to solution at line 8:     else
13. Moved from problem to solution at line 8:     if (isPalindrome)
14. Moved from problem to solution at line 9:       System.out.println(s + " is a palindrome");
15. Moved from problem to trash at line 0:     while (low < high {
16. Moved from problem to trash at line 1:     low= 0; high = s.length() - 1; isPalindrome = true;
Submit Parsons Solution clicked @ 1493429647185
Please clear all the lines from the left panel before submitting your answer.
17. Moved from problem to solution at line 8:       low++; high--;
18. Moved from problem to solution at line 8:     low= 1; high = s.length() - 1; isPalindrome = true;
19. Moved from problem to solution at line 9:     while (low < high) {
20. Moved from problem to solution at line 11:       }
21. Moved from problem to solution at line 16:         break;}
22. Moved from problem to solution at line 12:       if (s.charAt(low) != s.charAt(high)) {
23. Moved from problem to solution at line 13:         isPalindrome = false;
24. Reordered from line 18 to 14:         break;}
Submit Parsons Solution clicked @ 1493429702086
This line is not in its correct location:     int low, high, isPalindrome;          // This is line Y
Move this line in its place:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
Sorry, your solution is not yet complete and correct.
Please correct your answer
25. Reordered from line 6 to 5:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
26. Reordered from line 7 to 6:     String s = input.nextLine();          // This is line X
Submit Parsons Solution clicked @ 1493429724016
Sorry, that line has a bug
Delete this line:     low= 1; high = s.length() - 1; isPalindrome = true;
Sorry, your solution is not yet complete and correct.
Please correct your answer
27. Moved from solution to trash at line 2:     low= 1; high = s.length() - 1; isPalindrome = true;
28. Moved from trash to solution at line 8:     low= 0; high = s.length() - 1; isPalindrome = true;
Submit Parsons Solution clicked @ 1493429733901
This line is not in its correct location:       low++; high--;
Move this line in its place:       if (s.charAt(low) != s.charAt(high)) {
Sorry, your solution is not yet complete and correct.
Please correct your answer
29. Reordered from line 12 to 10:       if (s.charAt(low) != s.charAt(high)) {
Submit Parsons Solution clicked @ 1493429741510
This line is not in its correct location:       low++; high--;
Move this line in its place:         isPalindrome = false;
Sorry, your solution is not yet complete and correct.
Please correct your answer
30. Reordered from line 13 to 11:         isPalindrome = false;
Submit Parsons Solution clicked @ 1493429753174
This line is not in its correct location:       low++; high--;
Move this line in its place:         break;}
Sorry, your solution is not yet complete and correct.
Please correct your answer
31. Reordered from line 14 to 12:         break;}
Submit Parsons Solution clicked @ 1493429760025
Your Answer:
Here is a summary of your actions sorted by line
Line 1 (2 moves): import java.util.Scanner;
1. Moved from problem to solution at line 0
3. Reordered from line 2 to 1
Line 2 (2 moves): public class Palindrome {
7. Moved from problem to solution at line 3
8. Reordered from line 3 to 2
Line 3 (1 moves):   public static void main(String[] args) {
6. Moved from problem to solution at line 2
Line 4 (1 moves):     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
9. Moved from problem to solution at line 4
Line 5 (2 moves):     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
5. Moved from problem to solution at line 2
25. Reordered from line 6 to 5
Line 6 (2 moves):     String s = input.nextLine();          // This is line X
4. Moved from problem to solution at line 2
26. Reordered from line 7 to 6
Line 7 (1 moves):     int low, high, isPalindrome;          // This is line Y
10. Moved from problem to solution at line 5
Line 8 (2 moves):     low= 0; high = s.length() - 1; isPalindrome = true;
16. Moved from problem to trash at line 1
28. Moved from trash to solution at line 8
Line 9 (1 moves):     while (low < high) {
19. Moved from problem to solution at line 9
Line 10 (2 moves):       if (s.charAt(low) != s.charAt(high)) {
22. Moved from problem to solution at line 12
29. Reordered from line 12 to 10
Line 11 (2 moves):         isPalindrome = false;
23. Moved from problem to solution at line 13
30. Reordered from line 13 to 11
Line 12 (3 moves):         break;}
21. Moved from problem to solution at line 16
24. Reordered from line 18 to 14
31. Reordered from line 14 to 12
Line 13 (1 moves):       low++; high--;
17. Moved from problem to solution at line 8
Line 14 (1 moves):       }
20. Moved from problem to solution at line 11
Line 15 (1 moves):     if (isPalindrome)
13. Moved from problem to solution at line 8
Line 16 (1 moves):       System.out.println(s + " is a palindrome");
14. Moved from problem to solution at line 9
Line 17 (1 moves):     else
12. Moved from problem to solution at line 8
Line 18 (1 moves):       System.out.println(s + " is not a palindrome");
11. Moved from problem to solution at line 8
Line 19 (1 moves):     }}
2. Moved from problem to solution at line 1
Line 9 (5) (1 moves):     while (low < high {
15. Moved from problem to trash at line 0
Line 8 (7) (2 moves):     low= 1; high = s.length() - 1; isPalindrome = true;
18. Moved from problem to solution at line 8
27. Moved from solution to trash at line 2
Your Grade:
You took 31 steps to solve a Parsons puzzle containing 21 lines of code.
Next Problem clicked @ 1493429761463
Time spent on this problem: 347 seconds
<HR>
