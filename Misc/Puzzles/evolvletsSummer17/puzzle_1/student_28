Problem No. 1
Using Template # 100
The Problem:
System.out.println(s + " is a palindrome");
while while (low <= high) {
while (low < high {
while (low < high) {
low++; high--;
System.out.println(s + " is not a palindrome");
}
int low, high, isPalindrome;          // This is line Y
if (s.charAt(low) != s.charAt(high)) {
public static void main(String[] args) {
isPalindrome = false;
Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
import java.util.Scanner;
break;}
if (isPalindrome)
String s = input.nextLine();          // This is line X
System.out.print("Enter a string: "); //This line should immediately be placed before Line X
else
public class Palindrome {
low= 0; high = s.length() - 1; isPalindrome = true;
}}
Using Template # 100
The Problem:
Using Template # 100
The Problem:
This problem contains 21 lines.
Re-assemble them with 23 (or fewer) moves for full credit
Using Template # 100
The Problem:
System.out.println(s + " is a palindrome");
while while (low <= high) {
while (low < high {
while (low < high) {
low++; high--;
System.out.println(s + " is not a palindrome");
}
int low, high, isPalindrome;          // This is line Y
if (s.charAt(low) != s.charAt(high)) {
public static void main(String[] args) {
isPalindrome = false;
Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
import java.util.Scanner;
break;}
if (isPalindrome)
String s = input.nextLine();          // This is line X
System.out.print("Enter a string: "); //This line should immediately be placed before Line X
else
public class Palindrome {
low= 0; high = s.length() - 1; isPalindrome = true;
}}
Using Template # 100
The Problem:
Using Template # 100
The Problem:
1. Moved from problem to solution at line 0: import java.util.Scanner;
2. Moved from problem to solution at line 1: public class Palindrome {
3. Reordered from line 1 to 2: public class Palindrome {
4. Moved from problem to solution at line 2:   public static void main(String[] args) {
5. Reordered from line 2 to 3:   public static void main(String[] args) {
6. Moved from problem to solution at line 3:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
7. Reordered from line 3 to 4:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
8. Moved from problem to solution at line 4:     String s = input.nextLine();          // This is line X
9. Reordered from line 4 to 5:     String s = input.nextLine();          // This is line X
10. Moved from problem to solution at line 4:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
11. Moved from problem to solution at line 5:     int low, high, isPalindrome;          // This is line Y
12. Moved from problem to solution at line 7:     low= 0; high = s.length() - 1; isPalindrome = true;
13. Reordered from line 7 to 8:     low= 0; high = s.length() - 1; isPalindrome = true;
14. Moved from problem to solution at line 8:       if (s.charAt(low) != s.charAt(high)) {
15. Reordered from line 8 to 9:       if (s.charAt(low) != s.charAt(high)) {
16. Moved from problem to solution at line 9:    while while (low <= high) {
17. Reordered from line 9 to 10:    while while (low <= high) {
18. Moved from solution to problem at line 8:    while while (low <= high) {
19. Moved from solution to problem at line 9:       if (s.charAt(low) != s.charAt(high)) {
20. Moved from problem to solution at line 8:    while while (low <= high) {
21. Reordered from line 8 to 9:    while while (low <= high) {
22. Moved from problem to solution at line 9:       if (s.charAt(low) != s.charAt(high)) {
23. Reordered from line 9 to 10:       if (s.charAt(low) != s.charAt(high)) {
24. Moved from problem to solution at line 10:         isPalindrome = false;
25. Reordered from line 10 to 11:         isPalindrome = false;
26. Moved from problem to solution at line 11:       }
27. Reordered from line 11 to 12:       }
28. Moved from problem to solution at line 12:     else
29. Reordered from line 12 to 13:     else
30. Moved from problem to solution at line 13:       low++; high--;
31. Reordered from line 13 to 14:       low++; high--;
32. Moved from problem to solution at line 12:       System.out.println(s + " is a palindrome");
33. Reordered from line 12 to 15:       System.out.println(s + " is a palindrome");
34. Moved from problem to solution at line 12:       System.out.println(s + " is not a palindrome");
35. Moved from problem to solution at line 13:         break;}
36. Moved from solution to problem at line 10:       }
Submit Parsons Solution clicked @ 1500588279414
Please clear all the lines from the left panel before submitting your answer.
37. Moved from problem to trash at line 0:     if (isPalindrome)
38. Moved from problem to solution at line 16:     }}
39. Reordered from line 16 to 17:     }}
40. Moved from problem to trash at line 1:     while (low < high) {
41. Moved from problem to trash at line 2:     while (low < high {
42. Moved from problem to trash at line 3:       }
You have been working on this problem for a while. I recommend that you click on 'Quit' so that I can display the correct answer for you to compare.
Submit Parsons Solution clicked @ 1500588335592
This line is not in its correct location:     int low, high, isPalindrome;          // This is line Y
Move this line in its place:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
Sorry, your solution is not yet complete and correct.
Please correct your answer
43. Reordered from line 6 to 5:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
44. Reordered from line 7 to 6:     String s = input.nextLine();          // This is line X
Submit Parsons Solution clicked @ 1500588348881
Sorry, that line has a bug
Delete this line:    while while (low <= high) {
Sorry, your solution is not yet complete and correct.
Please correct your answer
45. Moved from solution to trash at line 4:    while while (low <= high) {
46. Moved from trash to solution at line 9:     while (low < high) {
Submit Parsons Solution clicked @ 1500588361297
This line is not in its correct location:       System.out.println(s + " is not a palindrome");
Move this line in its place:         break;}
Sorry, your solution is not yet complete and correct.
Please correct your answer
47. Moved from solution to trash at line 2:       System.out.println(s + " is not a palindrome");
Submit Parsons Solution clicked @ 1500588369393
This line is not in its correct location:     else
Move this line in its place:       low++; high--;
Sorry, your solution is not yet complete and correct.
Please correct your answer
48. Reordered from line 14 to 13:       low++; high--;
Submit Parsons Solution clicked @ 1500588377209
This line is not in its correct location:     else
Insert this line in its place:       }
Sorry, your solution is not yet complete and correct.
Please correct your answer
49. Moved from trash to solution at line 14:       }
50. Moved from solution to trash at line 3:     else
Submit Parsons Solution clicked @ 1500588384330
This line is not in its correct location:       System.out.println(s + " is a palindrome");
Insert this line in its place:     if (isPalindrome)
Sorry, your solution is not yet complete and correct.
Please correct your answer
51. Moved from solution to trash at line 5:       System.out.println(s + " is a palindrome");
52. Moved from trash to solution at line 15:     if (isPalindrome)
Submit Parsons Solution clicked @ 1500588394122
This line is not in its correct location:     }}
Insert this line in its place:       System.out.println(s + " is a palindrome");
Sorry, your solution is not yet complete and correct.
Please correct your answer
53. Moved from trash to solution at line 16:       System.out.println(s + " is a palindrome");
54. Moved from trash to solution at line 17:     else
55. Moved from trash to solution at line 18:       System.out.println(s + " is not a palindrome");
Submit Parsons Solution clicked @ 1500588433571
Your Answer:
Here is a summary of your actions sorted by line
Line 1 (1 moves): import java.util.Scanner;
1. Moved from problem to solution at line 0
Line 2 (2 moves): public class Palindrome {
2. Moved from problem to solution at line 1
3. Reordered from line 1 to 2
Line 3 (2 moves):   public static void main(String[] args) {
4. Moved from problem to solution at line 2
5. Reordered from line 2 to 3
Line 4 (1 moves):     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
10. Moved from problem to solution at line 4
Line 5 (3 moves):     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
6. Moved from problem to solution at line 3
7. Reordered from line 3 to 4
43. Reordered from line 6 to 5
Line 6 (3 moves):     String s = input.nextLine();          // This is line X
8. Moved from problem to solution at line 4
9. Reordered from line 4 to 5
44. Reordered from line 7 to 6
Line 7 (1 moves):     int low, high, isPalindrome;          // This is line Y
11. Moved from problem to solution at line 5
Line 8 (2 moves):     low= 0; high = s.length() - 1; isPalindrome = true;
12. Moved from problem to solution at line 7
13. Reordered from line 7 to 8
Line 9 (2 moves):     while (low < high) {
40. Moved from problem to trash at line 1
46. Moved from trash to solution at line 9
Line 10 (5 moves):       if (s.charAt(low) != s.charAt(high)) {
14. Moved from problem to solution at line 8
15. Reordered from line 8 to 9
19. Moved from solution to problem at line 9
22. Moved from problem to solution at line 9
23. Reordered from line 9 to 10
Line 11 (2 moves):         isPalindrome = false;
24. Moved from problem to solution at line 10
25. Reordered from line 10 to 11
Line 12 (1 moves):         break;}
35. Moved from problem to solution at line 13
Line 13 (3 moves):       low++; high--;
30. Moved from problem to solution at line 13
31. Reordered from line 13 to 14
48. Reordered from line 14 to 13
Line 14 (5 moves):       }
26. Moved from problem to solution at line 11
27. Reordered from line 11 to 12
36. Moved from solution to problem at line 10
42. Moved from problem to trash at line 3
49. Moved from trash to solution at line 14
Line 15 (2 moves):     if (isPalindrome)
37. Moved from problem to trash at line 0
52. Moved from trash to solution at line 15
Line 16 (4 moves):       System.out.println(s + " is a palindrome");
32. Moved from problem to solution at line 12
33. Reordered from line 12 to 15
51. Moved from solution to trash at line 5
53. Moved from trash to solution at line 16
Line 17 (4 moves):     else
28. Moved from problem to solution at line 12
29. Reordered from line 12 to 13
50. Moved from solution to trash at line 3
54. Moved from trash to solution at line 17
Line 18 (3 moves):       System.out.println(s + " is not a palindrome");
34. Moved from problem to solution at line 12
47. Moved from solution to trash at line 2
55. Moved from trash to solution at line 18
Line 19 (2 moves):     }}
38. Moved from problem to solution at line 16
39. Reordered from line 16 to 17
Line 9 (5) (1 moves):     while (low < high {
41. Moved from problem to trash at line 2
Line 9 (37) (6 moves):    while while (low <= high) {
16. Moved from problem to solution at line 9
17. Reordered from line 9 to 10
18. Moved from solution to problem at line 8
20. Moved from problem to solution at line 8
21. Reordered from line 8 to 9
45. Moved from solution to trash at line 4
Your Grade:
You took 55 steps to solve a Parsons puzzle containing 21 lines of code.
Next Problem clicked @ 1500588435123
Time spent on this problem: 553 seconds
<HR>
