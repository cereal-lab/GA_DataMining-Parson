Problem No. 1
Using Template # 100
The Problem:
}
else
isPalindrome = false;
import java.util.Scanner;
String s = input.nextLine();          // This is line X
low++; high--;
public class Palindrome {
}}
System.out.print("Enter a string: "); //This line should immediately be placed before Line X
while while (low <= high) {
while (low < high) {
if (s.charAt(low) != s.charAt(high)) {
break;}
public static void main(String[] args) {
low= 1; high = s.length() - 1; isPalindrome = true;
low= 0; high = s.length() - 1; isPalindrome = true;
Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
int low, high, isPalindrome;          // This is line Y
if (isPalindrome)
System.out.println(s + " is not a palindrome");
System.out.println(s + " is a palindrome");
Using Template # 100
The Problem:
Using Template # 100
The Problem:
This problem contains 21 lines.
Re-assemble them with 23 (or fewer) moves for full credit
Using Template # 100
The Problem:
}
else
isPalindrome = false;
import java.util.Scanner;
String s = input.nextLine();          // This is line X
low++; high--;
public class Palindrome {
}}
System.out.print("Enter a string: "); //This line should immediately be placed before Line X
while while (low <= high) {
while (low < high) {
if (s.charAt(low) != s.charAt(high)) {
break;}
public static void main(String[] args) {
low= 1; high = s.length() - 1; isPalindrome = true;
low= 0; high = s.length() - 1; isPalindrome = true;
Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
int low, high, isPalindrome;          // This is line Y
if (isPalindrome)
System.out.println(s + " is not a palindrome");
System.out.println(s + " is a palindrome");
Using Template # 100
The Problem:
Using Template # 100
The Problem:
1. Moved from problem to solution at line 0: import java.util.Scanner;
2. Moved from problem to solution at line 1: public class Palindrome {
3. Reordered from line 1 to 2: public class Palindrome {
4. Moved from problem to solution at line 2:   public static void main(String[] args) {
5. Reordered from line 2 to 3:   public static void main(String[] args) {
6. Moved from problem to solution at line 3:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
7. Reordered from line 3 to 4:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
8. Moved from problem to solution at line 4:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
9. Reordered from line 4 to 5:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
10. Moved from problem to solution at line 5:     String s = input.nextLine();          // This is line X
11. Reordered from line 5 to 6:     String s = input.nextLine();          // This is line X
12. Moved from problem to solution at line 6:     int low, high, isPalindrome;          // This is line Y
13. Reordered from line 6 to 7:     int low, high, isPalindrome;          // This is line Y
14. Moved from problem to solution at line 7:     low= 0; high = s.length() - 1; isPalindrome = true;
15. Reordered from line 7 to 8:     low= 0; high = s.length() - 1; isPalindrome = true;
16. Moved from problem to solution at line 8:     while (low < high) {
17. Reordered from line 8 to 9:     while (low < high) {
18. Moved from problem to solution at line 9:       if (s.charAt(low) != s.charAt(high)) {
19. Reordered from line 9 to 10:       if (s.charAt(low) != s.charAt(high)) {
20. Moved from problem to solution at line 10:         isPalindrome = false;
21. Reordered from line 10 to 11:         isPalindrome = false;
22. Moved from problem to solution at line 11:         break;}
23. Reordered from line 11 to 12:         break;}
24. Moved from problem to solution at line 12:       low++; high--;
25. Reordered from line 12 to 13:       low++; high--;
26. Moved from problem to solution at line 13:       }
27. Reordered from line 13 to 14:       }
28. Moved from problem to solution at line 14:     if (isPalindrome)
29. Reordered from line 14 to 15:     if (isPalindrome)
30. Moved from problem to solution at line 15:       System.out.println(s + " is a palindrome");
31. Reordered from line 15 to 16:       System.out.println(s + " is a palindrome");
32. Moved from problem to solution at line 16:     else
33. Reordered from line 16 to 17:     else
34. Moved from problem to solution at line 17:       System.out.println(s + " is not a palindrome");
35. Reordered from line 17 to 18:       System.out.println(s + " is not a palindrome");
36. Moved from problem to trash at line 0:     low= 1; high = s.length() - 1; isPalindrome = true;
37. Moved from problem to trash at line 1:    while while (low <= high) {
38. Moved from problem to trash at line 1:     }}
Submit Parsons Solution clicked @ 1489462195269
You have not yet identified all the lines. Insert:     }}
Sorry, your solution is not yet complete and correct.
Please correct your answer
39. Moved from trash to problem at line 21:     }}
40. Moved from problem to solution at line 18:     }}
41. Reordered from line 18 to 19:     }}
Submit Parsons Solution clicked @ 1489462209277
Your Answer:
Here is a summary of your actions sorted by line
Line 1 (1 moves): import java.util.Scanner;
1. Moved from problem to solution at line 0
Line 2 (2 moves): public class Palindrome {
2. Moved from problem to solution at line 1
3. Reordered from line 1 to 2
Line 3 (2 moves):   public static void main(String[] args) {
4. Moved from problem to solution at line 2
5. Reordered from line 2 to 3
Line 4 (2 moves):     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
6. Moved from problem to solution at line 3
7. Reordered from line 3 to 4
Line 5 (2 moves):     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
8. Moved from problem to solution at line 4
9. Reordered from line 4 to 5
Line 6 (2 moves):     String s = input.nextLine();          // This is line X
10. Moved from problem to solution at line 5
11. Reordered from line 5 to 6
Line 7 (2 moves):     int low, high, isPalindrome;          // This is line Y
12. Moved from problem to solution at line 6
13. Reordered from line 6 to 7
Line 8 (2 moves):     low= 0; high = s.length() - 1; isPalindrome = true;
14. Moved from problem to solution at line 7
15. Reordered from line 7 to 8
Line 9 (2 moves):     while (low < high) {
16. Moved from problem to solution at line 8
17. Reordered from line 8 to 9
Line 10 (2 moves):       if (s.charAt(low) != s.charAt(high)) {
18. Moved from problem to solution at line 9
19. Reordered from line 9 to 10
Line 11 (2 moves):         isPalindrome = false;
20. Moved from problem to solution at line 10
21. Reordered from line 10 to 11
Line 12 (2 moves):         break;}
22. Moved from problem to solution at line 11
23. Reordered from line 11 to 12
Line 13 (2 moves):       low++; high--;
24. Moved from problem to solution at line 12
25. Reordered from line 12 to 13
Line 14 (2 moves):       }
26. Moved from problem to solution at line 13
27. Reordered from line 13 to 14
Line 15 (2 moves):     if (isPalindrome)
28. Moved from problem to solution at line 14
29. Reordered from line 14 to 15
Line 16 (2 moves):       System.out.println(s + " is a palindrome");
30. Moved from problem to solution at line 15
31. Reordered from line 15 to 16
Line 17 (2 moves):     else
32. Moved from problem to solution at line 16
33. Reordered from line 16 to 17
Line 18 (2 moves):       System.out.println(s + " is not a palindrome");
34. Moved from problem to solution at line 17
35. Reordered from line 17 to 18
Line 19 (4 moves):     }}
38. Moved from problem to trash at line 1
39. Moved from trash to problem at line 21
40. Moved from problem to solution at line 18
41. Reordered from line 18 to 19
Line 8 (7) (1 moves):     low= 1; high = s.length() - 1; isPalindrome = true;
36. Moved from problem to trash at line 0
Line 9 (37) (1 moves):    while while (low <= high) {
37. Moved from problem to trash at line 1
Your Grade:
You took 41 steps to solve a Parsons puzzle containing 21 lines of code.
Next Problem clicked @ 1489462221757
Time spent on this problem: 626 seconds
<HR>
