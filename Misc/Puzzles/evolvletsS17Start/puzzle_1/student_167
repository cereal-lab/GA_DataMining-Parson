Problem No. 1
Using Template # 100
The Problem:
String s = input.nextLine();          // This is line X
int low, high, isPalindrome;          // This is line Y
break;}
isPalindrome = false;
}}
low= 0; high = s.length() - 1; isPalindrome = true;
low= 1; high = s.length() - 1; isPalindrome = true;
}
import java.util.Scanner;
System.out.println(s + " is a palindrome");
if (s.charAt(low) != s.charAt(high)) {
System.out.println(s + " is not a palindrome");
else
if (isPalindrome)
System.out.print("Enter a string: "); //This line should immediately be placed before Line X
public static void main(String[] args) {
low++; high--;
while while (low <= high) {
while (low < high) {
Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
public class Palindrome {
Using Template # 100
The Problem:
Using Template # 100
The Problem:
This problem contains 21 lines.
Re-assemble them with 23 (or fewer) moves for full credit
Using Template # 100
The Problem:
String s = input.nextLine();          // This is line X
int low, high, isPalindrome;          // This is line Y
break;}
isPalindrome = false;
}}
low= 0; high = s.length() - 1; isPalindrome = true;
low= 1; high = s.length() - 1; isPalindrome = true;
}
import java.util.Scanner;
System.out.println(s + " is a palindrome");
if (s.charAt(low) != s.charAt(high)) {
System.out.println(s + " is not a palindrome");
else
if (isPalindrome)
System.out.print("Enter a string: "); //This line should immediately be placed before Line X
public static void main(String[] args) {
low++; high--;
while while (low <= high) {
while (low < high) {
Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
public class Palindrome {
Using Template # 100
The Problem:
Using Template # 100
The Problem:
1. Moved from problem to solution at line 0: public class Palindrome {
2. Moved from problem to solution at line 1:   public static void main(String[] args) {
3. Reordered from line 1 to 2:   public static void main(String[] args) {
4. Moved from problem to solution at line 1: import java.util.Scanner;
5. Moved from problem to solution at line 3:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
6. Reordered from line 3 to 4:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
*  Outdented line 4:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
7. Moved from solution to problem at line 21:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
8. Moved from problem to solution at line 3:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
9. Reordered from line 3 to 4:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
10. Moved from problem to solution at line 4:     String s = input.nextLine();          // This is line X
11. Reordered from line 4 to 5:     String s = input.nextLine();          // This is line X
12. Moved from problem to solution at line 5:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
13. Reordered from line 5 to 6:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
14. Moved from problem to solution at line 6:     int low, high, isPalindrome;          // This is line Y
15. Reordered from line 6 to 7:     int low, high, isPalindrome;          // This is line Y
16. Moved from problem to solution at line 7:       }
17. Reordered from line 7 to 8:       }
18. Moved from problem to solution at line 8:       if (s.charAt(low) != s.charAt(high)) {
19. Reordered from line 8 to 9:       if (s.charAt(low) != s.charAt(high)) {
Submit Parsons Solution clicked @ 1489447705287
Please clear all the lines from the left panel before submitting your answer.
20. Moved from problem to solution at line 9:     low= 0; high = s.length() - 1; isPalindrome = true;
21. Reordered from line 9 to 10:     low= 0; high = s.length() - 1; isPalindrome = true;
22. Moved from problem to solution at line 10:     low= 1; high = s.length() - 1; isPalindrome = true;
23. Reordered from line 10 to 11:     low= 1; high = s.length() - 1; isPalindrome = true;
24. Reordered from line 7 to 11:     int low, high, isPalindrome;          // This is line Y
25. Reordered from line 11 to 6:     int low, high, isPalindrome;          // This is line Y
26. Reordered from line 8 to 11:       }
27. Reordered from line 8 to 6:       if (s.charAt(low) != s.charAt(high)) {
28. Reordered from line 6 to 11:       if (s.charAt(low) != s.charAt(high)) {
29. Reordered from line 7 to 6:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
Submit Parsons Solution clicked @ 1489447823091
Please clear all the lines from the left panel before submitting your answer.
30. Reordered from line 8 to 11:     low= 0; high = s.length() - 1; isPalindrome = true;
31. Reordered from line 8 to 11:     low= 1; high = s.length() - 1; isPalindrome = true;
32. Reordered from line 8 to 11:       }
33. Moved from problem to solution at line 11:    while while (low <= high) {
34. Moved from problem to solution at line 12:     while (low < high) {
35. Moved from solution to trash at line 0:     while (low < high) {
36. Moved from solution to trash at line 1:    while while (low <= high) {
37. Moved from trash to problem at line 21:     while (low < high) {
38. Moved from solution to problem at line 21:       }
39. Moved from problem to solution at line 10:     while (low < high) {
40. Reordered from line 10 to 11:     while (low < high) {
41. Moved from solution to problem at line 21:     while (low < high) {
42. Moved from problem to solution at line 10:       low++; high--;
You have been working on this problem for a while. I recommend that you click on 'Quit' so that I can display the correct answer for you to compare.
43. Reordered from line 10 to 11:       low++; high--;
44. Moved from problem to solution at line 11:     else
45. Reordered from line 10 to 12:     low= 1; high = s.length() - 1; isPalindrome = true;
46. Reordered from line 12 to 10:     low= 1; high = s.length() - 1; isPalindrome = true;
47. Reordered from line 11 to 12:     else
48. Moved from problem to solution at line 12:         isPalindrome = false;
49. Reordered from line 12 to 13:         isPalindrome = false;
50. Moved from problem to solution at line 13:     while (low < high) {
51. Reordered from line 13 to 14:     while (low < high) {
52. Moved from problem to solution at line 13:       }
53. Reordered from line 13 to 14:       }
54. Moved from problem to solution at line 14:       System.out.println(s + " is a palindrome");
55. Reordered from line 14 to 15:       System.out.println(s + " is a palindrome");
56. Moved from problem to solution at line 16:       System.out.println(s + " is not a palindrome");
57. Moved from solution to trash at line 1:     while (low < high) {
58. Moved from problem to solution at line 16:     if (isPalindrome)
59. Reordered from line 16 to 15:     if (isPalindrome)
60. Moved from trash to solution at line 16:     while (low < high) {
61. Moved from problem to solution at line 18:     }}
62. Reordered from line 18 to 19:     }}
63. Moved from problem to trash at line 1:         break;}
Submit Parsons Solution clicked @ 1489448167886
This line is not in its correct location:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
Move this line in its place:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
Sorry, your solution is not yet complete and correct.
Please correct your answer
64. Reordered from line 6 to 4:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
65. Reordered from line 7 to 5:     int low, high, isPalindrome;          // This is line Y
Submit Parsons Solution clicked @ 1489448197928
This line is not in its correct location:     int low, high, isPalindrome;          // This is line Y
Move this line in its place:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
Sorry, your solution is not yet complete and correct.
Please correct your answer
66. Reordered from line 6 to 5:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
Submit Parsons Solution clicked @ 1489448207826
This line is not in its correct location:     int low, high, isPalindrome;          // This is line Y
Move this line in its place:     String s = input.nextLine();          // This is line X
Sorry, your solution is not yet complete and correct.
Please correct your answer
67. Reordered from line 6 to 7:     int low, high, isPalindrome;          // This is line Y
Submit Parsons Solution clicked @ 1489448214061
This line is not in its correct location:       if (s.charAt(low) != s.charAt(high)) {
Move this line in its place:     low= 0; high = s.length() - 1; isPalindrome = true;
Sorry, your solution is not yet complete and correct.
Please correct your answer
68. Reordered from line 8 to 19:       if (s.charAt(low) != s.charAt(high)) {
Submit Parsons Solution clicked @ 1489448230380
Sorry, that line has a bug
Delete this line:     low= 1; high = s.length() - 1; isPalindrome = true;
Sorry, your solution is not yet complete and correct.
Please correct your answer
69. Moved from solution to problem at line 21:     low= 1; high = s.length() - 1; isPalindrome = true;
Submit Parsons Solution clicked @ 1489448241954
Please clear all the lines from the left panel before submitting your answer.
70. Moved from problem to trash at line 2:     low= 1; high = s.length() - 1; isPalindrome = true;
Submit Parsons Solution clicked @ 1489448249082
This line is not in its correct location:       low++; high--;
Move this line in its place:     while (low < high) {
Sorry, your solution is not yet complete and correct.
Please correct your answer
71. Reordered from line 14 to 10:     while (low < high) {
72. Reordered from line 10 to 9:     while (low < high) {
Submit Parsons Solution clicked @ 1489448269887
This line is not in its correct location:       low++; high--;
Move this line in its place:       if (s.charAt(low) != s.charAt(high)) {
Sorry, your solution is not yet complete and correct.
Please correct your answer
73. Reordered from line 18 to 10:       if (s.charAt(low) != s.charAt(high)) {
Submit Parsons Solution clicked @ 1489448279436
This line is not in its correct location:       low++; high--;
Move this line in its place:         isPalindrome = false;
Sorry, your solution is not yet complete and correct.
Please correct your answer
74. Reordered from line 12 to 11:     else
75. Reordered from line 13 to 11:         isPalindrome = false;
Submit Parsons Solution clicked @ 1489448288737
This line is not in its correct location:     else
Insert this line in its place:         break;}
Sorry, your solution is not yet complete and correct.
Please correct your answer
76. Moved from trash to solution at line 12:         break;}
Submit Parsons Solution clicked @ 1489448298478
This line is not in its correct location:     else
Move this line in its place:       low++; high--;
Sorry, your solution is not yet complete and correct.
Please correct your answer
77. Reordered from line 13 to 17:     else
Submit Parsons Solution clicked @ 1489448308564
Your Answer:
Here is a summary of your actions sorted by line
Line 1 (1 moves): import java.util.Scanner;
4. Moved from problem to solution at line 1
Line 2 (1 moves): public class Palindrome {
1. Moved from problem to solution at line 0
Line 3 (2 moves):   public static void main(String[] args) {
2. Moved from problem to solution at line 1
3. Reordered from line 1 to 2
Line 4 (4 moves):     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
12. Moved from problem to solution at line 5
13. Reordered from line 5 to 6
29. Reordered from line 7 to 6
64. Reordered from line 6 to 4
Line 5 (7 moves):     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
5. Moved from problem to solution at line 3
6. Reordered from line 3 to 4
*  Outdented line 4
7. Moved from solution to problem at line 21
8. Moved from problem to solution at line 3
9. Reordered from line 3 to 4
66. Reordered from line 6 to 5
Line 6 (2 moves):     String s = input.nextLine();          // This is line X
10. Moved from problem to solution at line 4
11. Reordered from line 4 to 5
Line 7 (6 moves):     int low, high, isPalindrome;          // This is line Y
14. Moved from problem to solution at line 6
15. Reordered from line 6 to 7
24. Reordered from line 7 to 11
25. Reordered from line 11 to 6
65. Reordered from line 7 to 5
67. Reordered from line 6 to 7
Line 8 (3 moves):     low= 0; high = s.length() - 1; isPalindrome = true;
20. Moved from problem to solution at line 9
21. Reordered from line 9 to 10
30. Reordered from line 8 to 11
Line 9 (12 moves):     while (low < high) {
34. Moved from problem to solution at line 12
35. Moved from solution to trash at line 0
37. Moved from trash to problem at line 21
39. Moved from problem to solution at line 10
40. Reordered from line 10 to 11
41. Moved from solution to problem at line 21
50. Moved from problem to solution at line 13
51. Reordered from line 13 to 14
57. Moved from solution to trash at line 1
60. Moved from trash to solution at line 16
71. Reordered from line 14 to 10
72. Reordered from line 10 to 9
Line 10 (6 moves):       if (s.charAt(low) != s.charAt(high)) {
18. Moved from problem to solution at line 8
19. Reordered from line 8 to 9
27. Reordered from line 8 to 6
28. Reordered from line 6 to 11
68. Reordered from line 8 to 19
73. Reordered from line 18 to 10
Line 11 (3 moves):         isPalindrome = false;
48. Moved from problem to solution at line 12
49. Reordered from line 12 to 13
75. Reordered from line 13 to 11
Line 12 (2 moves):         break;}
63. Moved from problem to trash at line 1
76. Moved from trash to solution at line 12
Line 13 (2 moves):       low++; high--;
42. Moved from problem to solution at line 10
43. Reordered from line 10 to 11
Line 14 (7 moves):       }
16. Moved from problem to solution at line 7
17. Reordered from line 7 to 8
26. Reordered from line 8 to 11
32. Reordered from line 8 to 11
38. Moved from solution to problem at line 21
52. Moved from problem to solution at line 13
53. Reordered from line 13 to 14
Line 15 (2 moves):     if (isPalindrome)
58. Moved from problem to solution at line 16
59. Reordered from line 16 to 15
Line 16 (2 moves):       System.out.println(s + " is a palindrome");
54. Moved from problem to solution at line 14
55. Reordered from line 14 to 15
Line 17 (4 moves):     else
44. Moved from problem to solution at line 11
47. Reordered from line 11 to 12
74. Reordered from line 12 to 11
77. Reordered from line 13 to 17
Line 18 (1 moves):       System.out.println(s + " is not a palindrome");
56. Moved from problem to solution at line 16
Line 19 (2 moves):     }}
61. Moved from problem to solution at line 18
62. Reordered from line 18 to 19
Line 9 (37) (2 moves):    while while (low <= high) {
33. Moved from problem to solution at line 11
36. Moved from solution to trash at line 1
Line 8 (7) (7 moves):     low= 1; high = s.length() - 1; isPalindrome = true;
22. Moved from problem to solution at line 10
23. Reordered from line 10 to 11
31. Reordered from line 8 to 11
45. Reordered from line 10 to 12
46. Reordered from line 12 to 10
69. Moved from solution to problem at line 21
70. Moved from problem to trash at line 2
Your Grade:
You took 77 steps to solve a Parsons puzzle containing 21 lines of code.
Next Problem clicked @ 1489448366929
Time spent on this problem: 1141 seconds
<HR>
