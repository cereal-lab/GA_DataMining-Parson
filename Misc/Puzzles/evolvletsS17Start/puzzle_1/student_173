Problem No. 1
Using Template # 100
The Problem:
else
isPalindrome = false;
}
int low, high, isPalindrome;          // This is line Y
System.out.print("Enter a string: "); //This line should immediately be placed before Line X
import java.util.Scanner;
low++; high--;
public static void main(String[] args) {
while (low < high {
while (low < high) {
public class Palindrome {
if (isPalindrome)
break;}
Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
if (s.charAt(low) != s.charAt(high)) {
}}
System.out.println(s + " is a palindrome");
System.out.println(s + " is not a palindrome");
String s = input.nextLine();          // This is line X
low= 0; high = s.length() - 1; isPalindrome = true;
low= 1; high = s.length() - 1; isPalindrome = true;
Using Template # 100
The Problem:
Using Template # 100
The Problem:
This problem contains 21 lines.
Re-assemble them with 23 (or fewer) moves for full credit
Using Template # 100
The Problem:
else
isPalindrome = false;
}
int low, high, isPalindrome;          // This is line Y
System.out.print("Enter a string: "); //This line should immediately be placed before Line X
import java.util.Scanner;
low++; high--;
public static void main(String[] args) {
while (low < high {
while (low < high) {
public class Palindrome {
if (isPalindrome)
break;}
Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
if (s.charAt(low) != s.charAt(high)) {
}}
System.out.println(s + " is a palindrome");
System.out.println(s + " is not a palindrome");
String s = input.nextLine();          // This is line X
low= 0; high = s.length() - 1; isPalindrome = true;
low= 1; high = s.length() - 1; isPalindrome = true;
Using Template # 100
The Problem:
Using Template # 100
The Problem:
1. Moved from problem to solution at line 0: public class Palindrome {
2. Moved from problem to solution at line 1:   public static void main(String[] args) {
3. Reordered from line 2 to 1: public class Palindrome {
4. Moved from problem to solution at line 1: import java.util.Scanner;
5. Moved from problem to solution at line 3:     int low, high, isPalindrome;          // This is line Y
6. Reordered from line 4 to 3:   public static void main(String[] args) {
7. Moved from problem to solution at line 4:     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
8. Moved from problem to solution at line 5:     String s = input.nextLine();          // This is line X
9. Moved from problem to solution at line 5:     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
10. Moved from problem to solution at line 7:       if (s.charAt(low) != s.charAt(high)) {
11. Reordered from line 7 to 8:       if (s.charAt(low) != s.charAt(high)) {
12. Moved from problem to solution at line 8:         isPalindrome = false;
13. Reordered from line 8 to 9:         isPalindrome = false;
14. Moved from problem to solution at line 8:       }
15. Reordered from line 8 to 10:       }
16. Moved from problem to solution at line 8:     while (low < high) {
17. Moved from problem to solution at line 11:     else
18. Reordered from line 11 to 12:     else
19. Moved from problem to solution at line 12:       low++; high--;
20. Reordered from line 12 to 13:       low++; high--;
21. Moved from problem to solution at line 11:         break;}
22. Moved from solution to problem at line 6:       }
23. Moved from problem to solution at line 13:       }
24. Reordered from line 13 to 14:       }
25. Moved from problem to solution at line 14:     if (isPalindrome)
26. Reordered from line 14 to 15:     if (isPalindrome)
27. Moved from problem to solution at line 11:       System.out.println(s + " is not a palindrome");
28. Reordered from line 11 to 10:       System.out.println(s + " is not a palindrome");
29. Reordered from line 10 to 12:       System.out.println(s + " is not a palindrome");
30. Reordered from line 12 to 11:       System.out.println(s + " is not a palindrome");
31. Moved from problem to solution at line 16:       System.out.println(s + " is a palindrome");
32. Reordered from line 16 to 17:       System.out.println(s + " is a palindrome");
33. Moved from problem to solution at line 8:     low= 0; high = s.length() - 1; isPalindrome = true;
34. Moved from problem to solution at line 18:     }}
35. Reordered from line 18 to 19:     }}
36. Reordered from line 13 to 12:         break;}
37. Reordered from line 12 to 13:         break;}
38. Moved from solution to problem at line 10:       System.out.println(s + " is not a palindrome");
39. Moved from solution to problem at line 9:     else
40. Moved from problem to solution at line 17:     else
41. Moved from problem to solution at line 18:       System.out.println(s + " is not a palindrome");
Submit Parsons Solution clicked @ 1489453504452
Please clear all the lines from the left panel before submitting your answer.
42. Moved from problem to trash at line 0:     low= 1; high = s.length() - 1; isPalindrome = true;
43. Moved from problem to trash at line 1:     while (low < high {
Submit Parsons Solution clicked @ 1489453513586
Your Answer:
Here is a summary of your actions sorted by line
Line 1 (1 moves): import java.util.Scanner;
4. Moved from problem to solution at line 1
Line 2 (2 moves): public class Palindrome {
1. Moved from problem to solution at line 0
3. Reordered from line 2 to 1
Line 3 (2 moves):   public static void main(String[] args) {
2. Moved from problem to solution at line 1
6. Reordered from line 4 to 3
Line 4 (1 moves):     Scanner input = new Scanner(System.in); //This line should  be placed before Line Y
7. Moved from problem to solution at line 4
Line 5 (1 moves):     System.out.print("Enter a string: "); //This line should immediately be placed before Line X
9. Moved from problem to solution at line 5
Line 6 (1 moves):     String s = input.nextLine();          // This is line X
8. Moved from problem to solution at line 5
Line 7 (1 moves):     int low, high, isPalindrome;          // This is line Y
5. Moved from problem to solution at line 3
Line 8 (1 moves):     low= 0; high = s.length() - 1; isPalindrome = true;
33. Moved from problem to solution at line 8
Line 9 (1 moves):     while (low < high) {
16. Moved from problem to solution at line 8
Line 10 (2 moves):       if (s.charAt(low) != s.charAt(high)) {
10. Moved from problem to solution at line 7
11. Reordered from line 7 to 8
Line 11 (2 moves):         isPalindrome = false;
12. Moved from problem to solution at line 8
13. Reordered from line 8 to 9
Line 12 (3 moves):         break;}
21. Moved from problem to solution at line 11
36. Reordered from line 13 to 12
37. Reordered from line 12 to 13
Line 13 (2 moves):       low++; high--;
19. Moved from problem to solution at line 12
20. Reordered from line 12 to 13
Line 14 (5 moves):       }
14. Moved from problem to solution at line 8
15. Reordered from line 8 to 10
22. Moved from solution to problem at line 6
23. Moved from problem to solution at line 13
24. Reordered from line 13 to 14
Line 15 (2 moves):     if (isPalindrome)
25. Moved from problem to solution at line 14
26. Reordered from line 14 to 15
Line 16 (2 moves):       System.out.println(s + " is a palindrome");
31. Moved from problem to solution at line 16
32. Reordered from line 16 to 17
Line 17 (4 moves):     else
17. Moved from problem to solution at line 11
18. Reordered from line 11 to 12
39. Moved from solution to problem at line 9
40. Moved from problem to solution at line 17
Line 18 (6 moves):       System.out.println(s + " is not a palindrome");
27. Moved from problem to solution at line 11
28. Reordered from line 11 to 10
29. Reordered from line 10 to 12
30. Reordered from line 12 to 11
38. Moved from solution to problem at line 10
41. Moved from problem to solution at line 18
Line 19 (2 moves):     }}
34. Moved from problem to solution at line 18
35. Reordered from line 18 to 19
Line 8 (7) (1 moves):     low= 1; high = s.length() - 1; isPalindrome = true;
42. Moved from problem to trash at line 0
Line 9 (5) (1 moves):     while (low < high {
43. Moved from problem to trash at line 1
Your Grade:
You took 43 steps to solve a Parsons puzzle containing 21 lines of code.
Next Problem clicked @ 1489453531169
Time spent on this problem: 614 seconds
<HR>
