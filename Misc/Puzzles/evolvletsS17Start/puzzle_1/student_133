Problem No. 1
Using Template # 100
The Problem:
System.out.printf("%4d", i * j);}
System.out.println("\n-----------------------------------------");
System.out.println();}
System.out.println("           Multiplication Table");
System.out.print("    ");
for (int i = 1; i <= 9; i++) {
for for (int j = 1; j < 9; j++)
for (int j = 1; j <= 9; j++)
for (int j = 1; j <= 9; j++) {
public class MultiplicationTable {
public Class MultiplicationTable {
public static void main(String[] args) {
System.out.print(i + " | ");
}}
System.out.print("   " + j);
Using Template # 100
The Problem:
Using Template # 100
The Problem:
This problem contains 15 lines.
Re-assemble them with 16 (or fewer) moves for full credit
Using Template # 100
The Problem:
System.out.printf("%4d", i * j);}
System.out.println("\n-----------------------------------------");
System.out.println();}
System.out.println("           Multiplication Table");
System.out.print("    ");
for (int i = 1; i <= 9; i++) {
for for (int j = 1; j < 9; j++)
for (int j = 1; j <= 9; j++)
for (int j = 1; j <= 9; j++) {
public class MultiplicationTable {
public Class MultiplicationTable {
public static void main(String[] args) {
System.out.print(i + " | ");
}}
System.out.print("   " + j);
Using Template # 100
The Problem:
Using Template # 100
The Problem:
1. Moved from problem to solution at line 0: }}
2. Moved from problem to solution at line 1: public class MultiplicationTable {
3. Moved from problem to solution at line 2:   public static void main(String[] args) {
4. Moved from problem to trash at line 0: public Class MultiplicationTable {
5. Moved from problem to solution at line 3:     System.out.println("           Multiplication Table");
6. Moved from problem to trash at line 1:         System.out.printf("%4d", i * j);}
7. Moved from problem to trash at line 2:    for for (int j = 1; j < 9; j++)
8. Moved from problem to solution at line 4:     for (int j = 1; j <= 9; j++)
9. Moved from problem to solution at line 5:       System.out.print("   " + j);
10. Moved from problem to solution at line 6:     System.out.println("\n-----------------------------------------");
11. Moved from problem to solution at line 7:     for (int i = 1; i <= 9; i++) {
12. Moved from problem to solution at line 8:     System.out.print("    ");
13. Moved from problem to solution at line 9:       System.out.print(i + " | ");
14. Moved from problem to solution at line 10:       System.out.println();}
15. Moved from problem to trash at line 3:       for (int j = 1; j <= 9; j++) {
Submit Parsons Solution clicked @ 1489395169075
This line is not in its correct location:     for (int j = 1; j <= 9; j++)
Move this line in its place:     System.out.print("    ");
Sorry, your solution is not yet complete and correct.
Please correct your answer
16. Reordered from line 8 to 4:     System.out.print("    ");
Submit Parsons Solution clicked @ 1489395189249
This line is not in its correct location:       System.out.println();}
Insert this line in its place:       for (int j = 1; j <= 9; j++) {
Sorry, your solution is not yet complete and correct.
Please correct your answer
17. Moved from trash to solution at line 10:       for (int j = 1; j <= 9; j++) {
Submit Parsons Solution clicked @ 1489395205857
This line is not in its correct location:       System.out.println();}
Insert this line in its place:         System.out.printf("%4d", i * j);}
Sorry, your solution is not yet complete and correct.
Please correct your answer
18. Moved from trash to solution at line 11:    for for (int j = 1; j < 9; j++)
19. Moved from solution to trash at line 2:    for for (int j = 1; j < 9; j++)
20. Moved from trash to solution at line 11:         System.out.printf("%4d", i * j);}
Submit Parsons Solution clicked @ 1489395225129
Your Answer:
Here is a summary of your actions sorted by line
Line 1 (1 moves): public class MultiplicationTable {
2. Moved from problem to solution at line 1
Line 2 (1 moves):   public static void main(String[] args) {
3. Moved from problem to solution at line 2
Line 3 (1 moves):     System.out.println("           Multiplication Table");
5. Moved from problem to solution at line 3
Line 4 (2 moves):     System.out.print("    ");
12. Moved from problem to solution at line 8
16. Reordered from line 8 to 4
Line 5 (1 moves):     for (int j = 1; j <= 9; j++)
8. Moved from problem to solution at line 4
Line 6 (1 moves):       System.out.print("   " + j);
9. Moved from problem to solution at line 5
Line 7 (1 moves):     System.out.println("\n-----------------------------------------");
10. Moved from problem to solution at line 6
Line 8 (1 moves):     for (int i = 1; i <= 9; i++) {
11. Moved from problem to solution at line 7
Line 9 (1 moves):       System.out.print(i + " | ");
13. Moved from problem to solution at line 9
Line 10 (2 moves):       for (int j = 1; j <= 9; j++) {
15. Moved from problem to trash at line 3
17. Moved from trash to solution at line 10
Line 11 (2 moves):         System.out.printf("%4d", i * j);}
6. Moved from problem to trash at line 1
20. Moved from trash to solution at line 11
Line 12 (1 moves):       System.out.println();}
14. Moved from problem to solution at line 10
Line 13 (1 moves): }}
1. Moved from problem to solution at line 0
Line 1 (8) (1 moves): public Class MultiplicationTable {
4. Moved from problem to trash at line 0
Line 5 (29) (3 moves):    for for (int j = 1; j < 9; j++)
7. Moved from problem to trash at line 2
18. Moved from trash to solution at line 11
19. Moved from solution to trash at line 2
Your Grade:
You took 20 steps to solve a Parsons puzzle containing 15 lines of code.
Next Problem clicked @ 1489395227930
Time spent on this problem: 383 seconds
<HR>
