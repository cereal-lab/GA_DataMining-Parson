Problem No. 2
Using Template # 100
The Problem:
if (guess == number)
if (guess = number)
public static void main(String[] args) {
System.out.println("Your guess is too low");
guess = -1; number = (int)(Math.random() * 101) // Generates a random number between 0 and 100
guess = -1; number = (int)(Math.random() * 101); // Generates a random number between 0 and 100
else if (guess > number)
System.out.println("Yes, the number is " + number);
Scanner input = new Scanner(System.in);    //This line should immediately be placed before Line X
System.out.println("Your guess is too high");
import java.util.Scanner;
public class GuessNumberOneTime {
else
int guess = input.nextInt();                // This is line X
}}
int guess, number;
Using Template # 100
The Problem:
Using Template # 100
The Problem:
This problem contains 16 lines.
Re-assemble them with 17 (or fewer) moves for full credit
1. Moved from problem to solution at line 0: import java.util.Scanner;
2. Moved from problem to solution at line 1: public class GuessNumberOneTime {
3. Reordered from line 1 to 2: public class GuessNumberOneTime {
4. Moved from problem to solution at line 2:   public static void main(String[] args) {
*  Outdented line 3: public class GuessNumberOneTime {
5. Reordered from line 2 to 3:   public static void main(String[] args) {
6. Moved from problem to solution at line 3:     int guess, number;
7. Reordered from line 3 to 4:     int guess, number;
8. Moved from problem to solution at line 4: 	guess = -1; number = (int)(Math.random() * 101); // Generates a random number between 0 and 100
9. Reordered from line 4 to 5: 	guess = -1; number = (int)(Math.random() * 101); // Generates a random number between 0 and 100
10. Moved from problem to trash at line 0: 	guess = -1; number = (int)(Math.random() * 101) // Generates a random number between 0 and 100
11. Moved from problem to solution at line 5:     Scanner input = new Scanner(System.in);    //This line should immediately be placed before Line X
12. Reordered from line 5 to 6:     Scanner input = new Scanner(System.in);    //This line should immediately be placed before Line X
13. Moved from problem to solution at line 6:     if (guess == number)
14. Reordered from line 6 to 7:     if (guess == number)
15. Moved from problem to solution at line 7:       System.out.println("Yes, the number is " + number);
16. Reordered from line 7 to 8:       System.out.println("Yes, the number is " + number);
17. Moved from problem to solution at line 8:     else if (guess > number)
18. Reordered from line 8 to 9:     else if (guess > number)
19. Moved from problem to solution at line 9:       System.out.println("Your guess is too high");
20. Reordered from line 9 to 10:       System.out.println("Your guess is too high");
21. Moved from problem to solution at line 10:     else
22. Reordered from line 10 to 11:     else
23. Moved from problem to solution at line 11:       System.out.println("Your guess is too low");
24. Reordered from line 11 to 12:       System.out.println("Your guess is too low");
25. Moved from problem to solution at line 12: }}
26. Reordered from line 12 to 13: }}
27. Moved from problem to solution at line 8:     int guess = input.nextInt();                // This is line X
28. Moved from problem to trash at line 1:     if (guess = number)
Submit Parsons Solution clicked @ 1489359979228
This line is not in its correct location:     if (guess == number)
Move this line in its place:     int guess = input.nextInt();                // This is line X
Sorry, your solution is not yet complete and correct.
Please correct your answer
29. Reordered from line 8 to 7:     int guess = input.nextInt();                // This is line X
Submit Parsons Solution clicked @ 1489359989741
Your Answer:
Here is a summary of your actions sorted by line
Line 1 (1 moves): import java.util.Scanner;
1. Moved from problem to solution at line 0
Line 2 (3 moves): public class GuessNumberOneTime {
2. Moved from problem to solution at line 1
3. Reordered from line 1 to 2
*  Outdented line 3
Line 3 (2 moves):   public static void main(String[] args) {
4. Moved from problem to solution at line 2
5. Reordered from line 2 to 3
Line 4 (2 moves):     int guess, number;
6. Moved from problem to solution at line 3
7. Reordered from line 3 to 4
Line 5 (2 moves): 	guess = -1; number = (int)(Math.random() * 101); // Generates a random number between 0 and 100
8. Moved from problem to solution at line 4
9. Reordered from line 4 to 5
Line 6 (2 moves):     Scanner input = new Scanner(System.in);    //This line should immediately be placed before Line X
11. Moved from problem to solution at line 5
12. Reordered from line 5 to 6
Line 7 (2 moves):     int guess = input.nextInt();                // This is line X
27. Moved from problem to solution at line 8
29. Reordered from line 8 to 7
Line 8 (2 moves):     if (guess == number)
13. Moved from problem to solution at line 6
14. Reordered from line 6 to 7
Line 9 (2 moves):       System.out.println("Yes, the number is " + number);
15. Moved from problem to solution at line 7
16. Reordered from line 7 to 8
Line 10 (2 moves):     else if (guess > number)
17. Moved from problem to solution at line 8
18. Reordered from line 8 to 9
Line 11 (2 moves):       System.out.println("Your guess is too high");
19. Moved from problem to solution at line 9
20. Reordered from line 9 to 10
Line 12 (2 moves):     else
21. Moved from problem to solution at line 10
22. Reordered from line 10 to 11
Line 13 (2 moves):       System.out.println("Your guess is too low");
23. Moved from problem to solution at line 11
24. Reordered from line 11 to 12
Line 14 (2 moves): }}
25. Moved from problem to solution at line 12
26. Reordered from line 12 to 13
Line 5 (16) (1 moves): 	guess = -1; number = (int)(Math.random() * 101) // Generates a random number between 0 and 100
10. Moved from problem to trash at line 0
Line 8 (10) (1 moves):     if (guess = number)
28. Moved from problem to trash at line 1
Your Grade:
You took 29 steps to solve a Parsons puzzle containing 16 lines of code.
Next Problem clicked @ 1489360005933
Time spent on this problem: 433 seconds
<HR>
